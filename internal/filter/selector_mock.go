// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package filter

import (
	"github.com/NVIDIA/nvidia-container-toolkit/internal/discover"
	"sync"
)

// Ensure, that SelectorMock does implement Selector.
// If this is not the case, regenerate this file with moq.
var _ Selector = &SelectorMock{}

// SelectorMock is a mock implementation of Selector.
//
// 	func TestSomethingThatUsesSelector(t *testing.T) {
//
// 		// make and configure a mocked Selector
// 		mockedSelector := &SelectorMock{
// 			SelectedFunc: func(device discover.Device) bool {
// 				panic("mock out the Selected method")
// 			},
// 		}
//
// 		// use mockedSelector in code that requires Selector
// 		// and then make assertions.
//
// 	}
type SelectorMock struct {
	// SelectedFunc mocks the Selected method.
	SelectedFunc func(device discover.Device) bool

	// calls tracks calls to the methods.
	calls struct {
		// Selected holds details about calls to the Selected method.
		Selected []struct {
			// Device is the device argument value.
			Device discover.Device
		}
	}
	lockSelected sync.RWMutex
}

// Selected calls SelectedFunc.
func (mock *SelectorMock) Selected(device discover.Device) bool {
	callInfo := struct {
		Device discover.Device
	}{
		Device: device,
	}
	mock.lockSelected.Lock()
	mock.calls.Selected = append(mock.calls.Selected, callInfo)
	mock.lockSelected.Unlock()
	if mock.SelectedFunc == nil {
		var (
			bOut bool
		)
		return bOut
	}
	return mock.SelectedFunc(device)
}

// SelectedCalls gets all the calls that were made to Selected.
// Check the length with:
//     len(mockedSelector.SelectedCalls())
func (mock *SelectorMock) SelectedCalls() []struct {
	Device discover.Device
} {
	var calls []struct {
		Device discover.Device
	}
	mock.lockSelected.RLock()
	calls = mock.calls.Selected
	mock.lockSelected.RUnlock()
	return calls
}
